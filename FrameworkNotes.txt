readProperties()- Reading the property file - Any project -FrameworkLibrary.java
invoke driver instance - FrameworkLibrary.java 
launchBrowser - FrameworkLibrary.java 
All Testng test classes extends FrameworkLibrary
login()-MMPUtil

findWE("id","locatorref","value");
findWE("xpath","locatorref","value");
findWE("id","locatorref");

public void findWE(param1,param2)
{
	
	if(param1.equals("id"))
	{
		driver.findElement(By.id("locatorref")).click();
	}
	else if (param1.equals("xpath"))
	{
	
	}
}

public void findWE(param1,param2,param3)
{

	driver.findElement(By.id("locatorref")).sendKeys("value");


}
 
Hi
Hello
-------------------------------------
environment= dev 
	read mmp_dev.properties 
	
environment = qa
	read mmp_qa.properties
	
browser = chrome 
	instantiate chrome driver 
browser = edge 
	instantiate edge driver 
================================
environment=dev 
browser=edge 
=================================

QA1= Current RElease 
QA2 = Previous Release ->fix the code and test it on QA2 ->released to prod 
merge the code into QA1 
QA1 

throws developer

throws / try/catch



Approach 1: Modular+DataDriven+Page Object model 

Approach 2: Modular+Data Driven+Keyword Driven + Page object model 

Approach 3 : Modular + Data Driven + Page Object model + bdd

https://www.selenium.dev/documentation/test_practices/encouraged/page_object_models/

src/main/java
	org
		iit
			utils 
				FrameworkLibrary
				ExcelUtils
				WaitUtility
				CustomJavaLibrary
				RandomLibrary
				ScreenshotUtility	
	org 
		iit 
			mmp 
			
			   utils
					MMPUtility.java 
				patientmodule
							 LoginPage.java  
							 
src/test/java
	org 
		iit 
			mmp
				patientmodule 
							LoginTests.java 

config 
	global
		qa
		dev 
pom.xml  - project object model 
	dependencies 
	plugins 
inputData.xlsx 

							
							
Page object Model : Design Pattern
 enhancing test maintenance 
 reducing code duplication

Advantages: 
	1. clean separation between test code and page specific code 
	
		Page Specific Code 
		---------------------
			login() -> LoginPage.java 
			bookAppointment ->ScheduleAppointment.java 
			
		Test Specific Code [TestNG fwk]
		--------------------
			loginTest() -> LoginTests.java 
				invoke page specific methods
					LoginPage lPage = new LoginPage();;
					lPage.login();
			bookAppointmentTest->ScheduleAppointmentsTests.java 
			
	2.There is a single repository for the services or operations the page offers rather than having these services scattered throughout the tests.
		TestNG tests there should not be any driver. statements should not be available
	
Summary
The public methods represent the services that the page offers -
Try not to expose the internals of the page ->
					Encapsulation[private By usernameBy = By.name("user_name");]
Generally donâ€™t make assertions
Methods return other PageObjects

		LoginPage lPage = new LoginPage();
		HomePage hPage   = lPage.login();
		hPage.readLoginSuccessfullMessage();
		public HomePage login()
		{
		
			return new HomePage(driver);
		}
		public String readLoginSuccessfullMessage()
		{
		
		}
		---------------------------------------------------
		
		LoginPage lPage = new LoginPage();
	    lPage.login();
		HomePage hPage = new HomePage();
		hPage.readLoginSuccessfullMessage();
		public void login()
		{
		
			 
		}
		
		public String readLoginSuccessfullMessage()
		{
		
		}
	==============================================================


Need not represent an entire page - Testcase focus areas should be converted into methods 

Different results for the same action are modelled as different methods

------------------------------------------------------------------------------------------


public String  loginASValidUser()
{

}
public String loginASInvalidUser()
{
	
}


public void loginValiddata()
{
	 
	enterUsername("ria1");
	

}

public void loginInvalidData()
{
	enterUsername("ria12345");

}

public void enterUsername()
{
	driver.findElement(By.id("username")).sendKeys();

}

RegisterPage.java 

enterUSername("invalidata:");
enterUsername("number");


@BeforeMethod
public void setup()
{
		initApplication();
		lp = new LoginPage();
		rp = new RegistrationPage();

}

@Test 

	loginPage.login();
	

@Test 
	
	
private By newAppointmentButton = By.xpath("//input[@value='Create new appointment']")
		String str = 	new String();
private int i 			= 10;


WebElement editButton = driver.findElement(By.id("Ebtn"));


Page Factory:
@FindBy(id = "Ebtn")
private WebElement editButton;

cons()
{
	PageFactory.initElements(driver, page);
}

editButton.click();


Page Object Model 
private By editButton = By.id("Ebtn");
driver.findElement(editButton).click();

https://total-qa.com/static-nested-inner-class-in-javainterview-question-selenium-webdriver/
https://www.browserstack.com/guide/page-object-model-in-selenium

Screenshot 
ExtentReport
Listener 
Keyword 
Github 
Jenkins - JIRA  
MYSQL
E2e 
ResTAPI
Cucumber
IQ

driver.executeScript('window.scrollTo(0, document.body.scrollHeight / 2)');
driver.executeScript('arguments[0].scrollIntoView(true);', exploreButton);
await driver.executeScript('arguments[0].click();', exploreButton);


@Test pass 

OnTestSuccess (TestResult tr)
		Syso("The TEstcase name :"+ testcaseID+"Passed");
		//captureScreenshot
OnTestFailure
		captureScreenshot 


Listener - 

		OnTestSuccess (TestResult tr)
		Syso("The TEstcase name :"+ testcaseID+"Passed");
		//captureScreenshot
	  OnTestFailure
		captureScreenshot 
		
		
Interface - abstract- not implemented void m1();
		    static methods 
			concrete methods - default void m1(){}

	

       <dependency>
			<groupId>com.aventstack</groupId>
			<artifactId>extentreports</artifactId>
			<version>5.1.2</version>
		</dependency>
		
		
  extentTest = extentReports.createTest("############Validate Schedule Appointment Tests########");	
  extentTest.info("Navigating to Schedule Appointment");
      
  screenshotUtil = new ScreenshotUtil(driver);	
  screenshotPath = screenshotUtil.captureScreenshot("ScheduleAppointment_Page2");
  extentTest.addScreenCaptureFromPath(screenshotPath,"Schedule_Appointment_Completed");


TestCase :

@Test 

1. step1-login()
	extentReport.info("");
	catpureScreenshot();

2. step2- bookAppointment()
	extentReport.info("");
	catpureScreenshot();
	
3. step3-fetchValues
	extentReport.info("");
	catpureScreenshot();

4. step4-Compare 
	extentReport.info("");
	catpureScreenshot();
	
	C:\Users\sudhe\eclipse-workspace\IITWF2025\mmpequinox/screenshots/Test1_2025-02-21_08-32-23.png


Summary :
 Listners used to log the messages : timetaken to execute tests 
 Extent Report for the logging and associating the screenshots in the report 
 